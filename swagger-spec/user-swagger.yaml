swagger: '2.0'
info:
  version: 0.0.1
  title: iKoreaTown User Service API
  description: This is the API of User Service. Users can be created, deleted, edited, and retrieved. Users can also log-in, which will create a session cookie and issue a token. Logging out will delete the code.
  termsOfService: "https://www.iKoreaTown.net/terms"
  contact:
    email: "jinguanglong11@icloud.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

schemes:
  - 'https'
host: "localhost:3000"
basePath: "/api/v1"

paths:
  /user:
    get:
      summary: Returns all users in the database
      description: Only the "admin" user can access this.
      operationId: getUsers
      security:
        - JWT: []
      parameters:
        - name: listSize
          in: query
          description: Number of users returned
          type: integer
        - name: pageNumber
          in: query
          description: page number
          type: integer
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        401:
          $ref: '#/responses/Standard401ErrorResponse'
    post:
      summary: Create a new user
      description: Admin user can create a new user, or users can register and create their own account .
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application:json
      parameters:
        - name: userData
          in: body
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        200:
          description: User created successfully
          schema:
            $ref: '#/definitions/user'
          headers:
            Location:
              type: string
              description: The Server returns the url of the new user
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
  /user/{username}:
    get:
      summary: Retrieves a user
      description: Users can only retrieve their own account, not other users'. Except for the "admin" user, who can retrieve anyone.
      operationId: getUserByName
      security:
        - JWT: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          required: true
          description: The person's username
          type: string
      responses:
        200:
          description: Returns the user's data
          schema:
            $ref: '#/definitions/user'
        401:
          $ref: '#/responses/Standard401ErrorResponse'
        404:
          description: 'The {username} was not found.'
    post:
      summary: Edits a user
      description: Users can only edit their own account, not other users. Except for the admin user, who can edit anyone.
      operationId: editUser
      security:
        - JWT: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/username'
        - $ref: '#/parameters/userData'
        - $ref: '#/parameters/sessionCookie'
      responses:
        200:
          description: User data was saved successfully
          schema:
            $ref: '#/definitions/user'
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        401:
          $ref: '#/responses/Standard401ErrorResponse'
        404:
          description: 'The {username} was not found.'
    delete:
      summary: Delete a user
      description: User can delete their own account, not other users. Except for the admin user, who can delete any one.
      operationId: deleteUser      
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/username'
        - $ref: '#/parameters/sessionCookie'
      responses:
        204:
          description: User account was deleted
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        404:
          description: 'The {username} was not found.'
  /user/login:
    post:
      summary: Logs in
      description: Users can log in.
      operationId: userLogin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userData
          required: true
          description: The login credentials
          schema:
            required: [username, password]
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Login successfully.
          schema:
            $ref: '#/definitions/user'
          headers:
            Set-Cookie:
              type: string
              description: The session cookie
              default: demo-session-id=123456789012345678901234567890
  /user/{username}/logout:
    post:
      summary: Logs out the given user
      description: Users can log themselves out, not other users.
      security:
        - JWT: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/username'
        - $ref: '#/parameters/sessionCookie'
      responses:
        204:
          description: Logout successfully
          headers:
            Set-Cookie:
              type: string
              description: Deletes the session cookie
              default: demo-session-id=deleted; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/
        401:
          description: You tried to log someone else out.
        404:
          description: 'The {useranme} was not found.'

definitions:  
  # The user schema
  user:
    type: object
    description: a registered user
    required: [username, password, name, email]
    properties:
      id:
        type: integer
        format: int32
        description: user id must be unique.
      username:
        type: string
        minLength: 6
        maxLength: 20
        pattern: "^\\w+$"
        description: username must be unique.
      password:
        type: string
        minLength: 8
        description: a super-secure, 8-character password
      name:
        type: object
        required: [firstname]
        properties:
          firstname:
            type: string
            minLength: 1
          lastname:
            type: string
            minLength: 1
      email:
        type: string
        pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        description: email must be unique.
      telephone:
        type: string
        description: telephone must be unique.
      userStatus:
        type: boolean
        description: User status, '0' for logged out, '1' for logged in
      lastLoginDate:
        type: string
        format: date-time
        description: when the user last logged in.
        readOnly: true
      registerDate:
        type: string
        format: date-time
        description: when the user registered.
        readOnly: true
      profilePhotoUrl:
        type: string
        description: User profile Photo url
    example:
      username: tony
      password: 12345678
      name:
        firname: Tony
        lastname: Kim
      email: tony@abc.com
      telephone: 12312341234
      lastLoginDate: 2017-05-11T14-00-32Z
      registerDate: 2015-01-01T00-00-00Z
      profilePhotoUrl: https://www.ikoreatwon.com/usrs/123456/avatar.png
  Error:
    properties:
      code:
        type: string
      message:
        type: string

responses:
  Standard400ErrorResponse:
    description: Bad JSON formatting in the request.
    schema:
      $ref: '#/definitions/Error'
  Standard401ErrorResponse:
    description: Permission denied.
    schema:
      $ref: '#/definitions/Error'
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/Error'

securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    in: header

parameters:
  sessionCookie:
    name: Cookie
    in: header
    required: true
    type: string
    description: session cookie

  username: 
    name: username
    in: path
    required: true
    type: string
    description: This is the {username} path parameters

  userData:
    name: user
    in: body
    required: true
    schema:
      $ref: '#/definitions/user'
    description: The user data for create/update operations