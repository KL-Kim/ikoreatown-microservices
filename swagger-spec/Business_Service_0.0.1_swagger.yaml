swagger: '2.0'
info:
  description: >-
    This is the API of Business Service. Business can be created, deleted, edited, and retrieved by proper role.
  version: 0.0.1
  title: iKoreaTown Business Service API

  termsOfService: https://www.iKoreaTown.net/terms
  contact:
    email: jinguanglong11@icloud.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: admin
  description: Administrators can manage everything except for other adminstrators.
- name: manager
  description: Managers can manage busienss, stories, reviews and comments.

paths:
  /business:
    get:
      summary: Returns all business 
      description: Anyone can get all business.
      operationId: getBusiness
      parameters:
        - name: listSize
          in: query
          description: Number of business returned
          type: integer
        - name: pageNumber
          in: query
          description: page number
          type: integer
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of business
          schema:
            type: array
            items:
              $ref: '#/definitions/business'
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
          
    post:
      tags:
      - manager
      summary: Create a new business
      description: Admin or manager can create a business
      operationId: createBusiness
      security:
        - JWT: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/jwtToken'
        - name: businessData
          in: body
          required: true
          schema:
            $ref: '#/definitions/business'
      responses:
        200:
          description: Business created successfully
          schema:
            $ref: '#/definitions/business'
          headers:
            Location:
              type: string
              description: The Server returns the url of the new business
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
          
  /business/{id}:
    get:
      summary: Retrieves a business
      description: Anyone can retrieve business,
      operationId: getBusinessById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/businessId'
      responses:
        200:
          description: Returns the Business's data
          schema:
            $ref: '#/definitions/business'
        401:
          $ref: '#/responses/Standard401ErrorResponse'
        404:
          $ref: '#/responses/Standard404ErrorResponse'
          
    put:
      tags:
      - manager
      summary: Update a business
      description: Proper role can only edit the business.
      operationId: updateBusiness
      security:
        - JWT: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/jwtToken'
        - name: id
          in: path
          required: true
          description: The busines's id
          type: string
        - name: businessData
          in: body
          required: true
          schema:
            $ref: '#/definitions/business'
      responses:
        200:
          description: Business data was saved successfully
          schema:
            $ref: '#/definitions/business'
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        401:
          $ref: '#/responses/Standard401ErrorResponse'
        404:
          $ref: '#/responses/Standard404ErrorResponse'
          
    delete:
      tags:
      - admin
      summary: Delete a business
      description: Admin can delete a business.
      operationId: deleteBusiness
      security:
        - JWT: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: The busines's id
          type: string
        - $ref: '#/parameters/jwtToken'
      responses:
        204:
          description: Business was deleted
        400:
          $ref: '#/responses/Standard400ErrorResponse'
        404:
          description: 'The {id} was not found.'

definitions:  
  # Business schema
  business:
    type: object
    description: business schema
    required: [id, state, name, category, rating, area, telephone, address, geo, businessStatus, priceRange, views, serviceHours, rest]
    properties:
      id:
        type: string
        format: ObjectId
        example: 5a4ef8f5537cd042155581a5
      state:
        type: string
        enum: 
        - draft
        - published
      subDepartments:
        type: array
        description: Multiple departments
        items:
          type: object
          properties:
            id:
              type: string
              format: ObjectId
            name:
              type: string
      category:
        type: string
        example: Chinese
      tags:
        type: array
        items:
          type: string
          example: BBQ
      rating:
        type: object
        properties:
          value:
            type: number
            example: 3.7
          count:
            type: integer
            example: 7
      name:
        type: string
        description: title must be unique.
        example: Steak House
      description:
        type: string
        example: Since 1997, bla bla bla...
      telephone:
        type: array
        items:
          type: string
          example: 025-1234-1234
      address:
        type: object
        properties:
          province:
            type: string
            example: Jiangsu
          city:
            type: string
            example: Nanjing
          area:
            type: string
            example: Xuanwu
          street:
            type: string
            example: 仙林文枢东路7号晴天广场2F (청은마트 2층)
      geo:
        type: object
        properties:
          latitude:
            type: number
            example: 32.0968400000
          longitude:
            type: number
            example: 118.9135000000
      priceRange:
        type: string
        description: Average Price
        example: 100-150
      businessStatus:
        type: string
        enum: ['normal', 'dissoluted']
      views:
        type: integer
        format: int32
        description: the number of someone views
        example: 12345
      openingHoursSpec:
        type: object
        properties:
          monFri:
            type: object
            properties:
              opens: 
                type: string
                example: 10:00
              closes:
                type: string
                example: 23:59
          satSun:
            type: object
            properties:
              opens: 
                type: string
                example: 10:00
              closes:
                type: string
                example: 23:59
      korean:
        type: boolean
      rest:
        type: string
        example: 연중무휴
      payment:
        type: array
        items:
          type: string
          example: VISA
      delivery:
        type: boolean
      event:
        type: string
        example: 30% off
      createdAt:
        type: string
        format: date-time
        description: The first day of the business
      menu: 
        type: array
        items:
          type: object
          properties: 
            name: 
              type: string
              example: 된장찌개
            price:
              type: integer
              example: 15
            hot:
              type: boolean
            new:
              type: boolean
          required:
          - name
          - price
      businessImageUri:
        type: string
        description: Business Images uri
        example: 'https://www.ikoreatwon.com/business/000000001/front.png'
      reviewsList:
        type: array
        items: 
          type: string
          format: ObjectId
      storiesList:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
          
  Error:
    type: object
    properties:
      status:
        type: integer
        example: 404
      message:
        type: string
        example: Not found

responses:
  Standard400ErrorResponse:
    description: Bad request.
    schema:
      $ref: '#/definitions/Error'
      
  Standard401ErrorResponse:
    description: Unauthorized.
    schema:
      $ref: '#/definitions/Error'
      
  Standard403ErrorResponse:
    description: Forbidden.
    schema:
      $ref: '#/definitions/Error'
      
  Standard404ErrorResponse:
    description: Not found.
    schema:
      $ref: '#/definitions/Error'
      
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/Error'

securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    description: For accessing the API, a valid JWT token must be passed in all the queries in the 'Authorization' header.
    in: header
    
parameters:
  businessId:
    name: id
    in: path
    required: true
    description: The busines's id
    type: string
  jwtToken:
    name: token
    in: header
    required: true
    description: access token
    type: string
    
# Added by API Auto Mocking Plugin
host: localhost:3002
basePath: /api/v1/
schemes:
 - https