openapi: 3.0.0

info:
  description: This is the API of Review/Comment Service
  version: "0.1.0"
  title: Comment/Review Service API
  termsOfService: 'https://www.iKoreaTown.net/terms'
  contact:
    email: jinguanglong11@icloud.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - url: 'https://localhost:3003/api/v1'

tags:
  - name: manager
  - name: regular

paths:
  /review:
    get:
      tags:
      - regular
      summary: Retrieve all reviews/comments
      description: Anyone can access this.
      parameters:
        - name: limit
          in: query
          description: Number of reviews returned
          schema:
            type: integer
        - name: skip
          in: query
          description: Number of reviews to skip
          schema:
            type: integer
        - name: bid
          in: query
          description: business id
          schema:
            type: string
            format: ObjectId
        - name: uid
          in: query
          description: user id
          schema:
            type: string
            format: ObjectId
        - name: orderBy
          in: query
          description: review list order
          schema:
            type: string
        - name: search
          in: query
          description: search term
          schema:
            type: string
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - regular
      summary: Add new review
      description: Only regular user can add new review
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Review added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  totalCount:
                    type: integer
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - regular
        - manager
      summary: Update review
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  totalCount:
                    type: integer
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - regular
      summary: Delete review
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  format: ObjectId
                uid:
                  type: string
                  format: ObjectId
      responses:
        200:
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  totalCount:
                    type: integer
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'

  '/vote/{id}':
    put:
      tags:
      - regular
      summary: Regular user can vote other user's review
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Review's id
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  format: ObjectId
      responses:
        200:
          description: Vote successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'

components:
  schemas:
    Review:
      type: object
      required:
        - id
        - businessId
        - userId
        - status
        - rating
        - content
        - createdAt
      properties:
        id:
          type: string
          format: ObjectId
          example: 5a4ef8f5537cd042155581a5
        status:
          type: string
          enum:
            - normal
            - suspended
        quality:
          type: number
          format: int32
        busienssId:
          type: string
          format: ObjectId
          example: 5a4ef8f5537cd042155581b1
        business:
          description: For mongoose population
          type: string
          format: ObjectId
          example: 5a4ef8f5537cd042155581b1
        userId:
          type: string
          format: ObjectId
          example: 5a4ef8f5537cd042155581b1
        user:
          description: For mongoose population
          type: string
          format: ObjectId
          example: 5a4ef8f5537cd042155581b1
        rating:
          type: integer
          example: 5
        content:
          type: string
          example: Very very good.
        serviceGood:
          type: boolean
          default: fault
        envGood:
          type: boolean
          default: fault
        comeback:
          type: boolean
          default: fault
        upVote:
          type: array
          items:
            type: string
            example: 5a4ef8f5537cd042155581b1
        downVote:
          type: array
          items:
            type: string
            example: 5a4ef8f5537cd042155581b1
        imagesUri:
          type: array
          items:
            type: string
            format: file
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: Not found

  responses:
    204:
      description: OK

    400:
      description: Bad JSON formatting in the request.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: Unauthorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    403:
      description: Forbidden
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    404:
      description: Not found
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    409:
      description: Conflict
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    500:
      description: Internal server error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT